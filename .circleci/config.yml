---
version: 2.1

orbs:
  codecov: codecov/codecov@3.2.2

# Run jobs only for version-number tagged builds & All Branches
all_branches_and_version_tag: &all_branches_and_version_tag
  filters:
    tags:
      only: /^\d+[.\d]+.*/

# Run jobs only for version-number tagged builds
version_tag_only: &version_tag_only
  filters:
    tags:
      only: /^\d+[.\d]+.*/
    branches:
      ignore: /.*/

workflows:
  test:
    jobs:
      - static-checks:
          <<: *all_branches_and_version_tag
      - mypy:
          <<: *all_branches_and_version_tag
      - build-docs:
          <<: *all_branches_and_version_tag
      - test:
          name: test-python<< matrix.python_version >>
          matrix:
            parameters:
              python_version: ["3.8", "3.9"]
          <<: *all_branches_and_version_tag
          requires:
            - static-checks
      - build-and-verify:
          <<: *all_branches_and_version_tag
          requires:
            - test
            - build-docs
            - mypy
      - hold:
          name: Needs-Approval
          type: approval
          <<: *version_tag_only
          requires:
            - build-and-verify
      - publish:
          requires:
            - Needs-Approval
          <<: *version_tag_only

  nightly:
    triggers:
      - schedule:
          cron: "0 19 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - deploy

executors:
  docker-executor:
    parameters:
      python_version:
        type: string
        default: "3.7"
    docker:
      - image: cimg/python:<<parameters.python_version>>

jobs:
  static-checks:
    description: "Static checks"
    executor: docker-executor
    steps:
      - checkout
      - run:
          command: |
            cp .pre-commit-config.yaml pre-commit-cache-key.txt
            python --version --version >> pre-commit-cache-key.txt
      - restore_cache:
          keys:
            - v1-pc-cache-{{ checksum "pre-commit-cache-key.txt" }}-
      - run:
          name: Run pre-commit
          command: |
            pip install pre-commit
            pre-commit run --all-files || { git --no-pager diff && false ; }
      - save_cache:
          key: v1-pc-cache-{{ checksum "pre-commit-cache-key.txt" }}-
          paths:
            - ~/.cache/pre-commit
            - ~/.pyenv/versions/

  mypy:
    description: "Mypy"
    executor:
      name: docker-executor
      python_version: "3.9"
    steps:
      - checkout
      - restore_cache:
          keys:
            - mypy-{{ .Branch }}-{{ checksum "setup.cfg" }}-{{ checksum "/home/circleci/.pyenv/version" }}
            - mypy-main-{{ checksum "setup.cfg" }}-{{ checksum "/home/circleci/.pyenv/version" }}
      - run:
          name: Install Dependencies for sasl
          command: |
            sudo apt-get install -y --no-install-recommends build-essential
            sudo apt-get update
            sudo apt-get upgrade
            sudo apt-get install libsasl2-dev
      - run:
          name: Install Dependencies
          command: pip install -U -e .[all,mypy]
      - run:
          name: Run Mypy
          command: |
            mypy --version
            mypy astronomer/
      - save_cache:
          paths:
            - ~/.cache/pip
            - ~/.pyenv/versions/
          key: mypy-{{ .Branch }}-{{ checksum "setup.cfg" }}-{{ checksum "/home/circleci/.pyenv/version" }}

  build-docs:
    description: "Build docs"
    executor:
      name: docker-executor
      python_version: "3.9"
    steps:
      - checkout
      - restore_cache:
          keys:
            - docs-{{ .Branch }}-{{ checksum "setup.cfg" }}-{{ checksum ".readthedocs.yaml" }}
            - docs-main-{{ checksum "setup.cfg" }}-{ checksum ".readthedocs.yaml" }}
      - run:
          name: Install Dependencies for sasl
          command: |
            sudo apt-get install -y --no-install-recommends build-essential
            sudo apt-get update
            sudo apt-get upgrade
            sudo apt-get install libsasl2-dev
      - run:
          name: Install Dependencies
          command: pip install -U -e .[all,docs,mypy]
      - run:
          name: Run Sphinx
          command: |
            cd docs
            make clean html
      - save_cache:
          paths:
            - ~/.cache/pip
            - ~/.pyenv/versions/
          key: docs-{{ .Branch }}-{{ checksum "setup.cfg" }}-{{ checksum ".readthedocs.yaml" }}


  test:
    parameters:
      python_version:
        description: "Python Version"
        type: string
    description: Test Python-<<parameters.python_version>>
    executor:
      name: docker-executor
      python_version: "<<parameters.python_version>>"
    parallelism: 4
    steps:
      - checkout
      - restore_cache:
          keys:
            - deps-{{ .Branch }}-{{ checksum "setup.cfg" }}-{{ checksum "/home/circleci/.pyenv/version" }}
            - deps-main-{{ checksum "setup.cfg" }}-{{ checksum "/home/circleci/.pyenv/version" }}
      - run:
          name: Install Dependencies for sasl
          command: |
            sudo apt-get install -y --no-install-recommends build-essential
            sudo apt-get update
            sudo apt-get upgrade
            sudo apt-get install libsasl2-dev
      - run:
          name: Install Dependencies
          command: pip install -U -e .[all,tests]
      - run:
          name: Run tests
          command: |
            set -e
            TEST_FILES=$(circleci tests glob "tests/**/test_*.py" | circleci tests split --split-by=timings)
            pytest --junit-xml=test-report/report.xml  $TEST_FILES
      - codecov/upload:
          file: coverage.xml
      - run:
          name: Generate Constraints
          command: pip freeze | sort | grep -v "@" > constraints-<<parameters.python_version>>.txt
      - store_artifacts:
          path: constraints-<<parameters.python_version>>.txt
      - store_test_results:
          path: test-report
      - save_cache:
          paths:
            - ~/.cache/pip
            - ~/.pyenv/versions/
          key: deps-{{ .Branch }}-{{ checksum "setup.cfg" }}-{{ checksum "/home/circleci/.pyenv/version" }}

  build-and-verify:
    executor:
      name: docker-executor
      python_version: "3.9"
    steps:
      - checkout
      - run:
          name: verify tag
          command: |-
            python3 .circleci/scripts/verify_tag_and_version.py
      - run:
          name: build artifacts
          command: |
            pip install -U build
            git clean -fxd
            python -m build

      - persist_to_workspace:
          root: .
          paths:
            - dist/*

  publish:
    executor:
      name: docker-executor
      python_version: "3.9"
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Deploy to Test PyPI
          command: |-
            pip install -U twine
            twine check /tmp/workspace/dist/*
            twine upload /tmp/workspace/dist/*
      - store_artifacts:
          path: /tmp/workspace/dist/
          destination: dist

  deploy:
    executor:
      name: docker-executor
      python_version: "3.9"
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.12
      - run:
          name: Deploy
          command: |
            cd .circleci/integration-tests
            bash script.sh $DEPLOYMENT_INSTANCE $ASTRO_BASE_DOMAIN $ASTRO_RELEASE_NAME $ASTRO_API_KEY
